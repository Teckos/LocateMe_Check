/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package locatemecheck;
import javax.swing.JOptionPane;
import org.openqa.selenium.*;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;
import java.awt.event.KeyEvent;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.text.BadLocationException;
/**
 *
 * @author Teckos
 */
public class LocateMeCheck1 extends javax.swing.JFrame {
     WebDriver driver;
    WebDriverWait wait0;
    WebDriverWait wait1;
    String SUCCES="";
    String SUCCES1="";
    String IMEI_ORI="";
    String type="IPHONE";
    String etat="OK";
    
    
    
    ImageIcon loader =  new ImageIcon("C:\\Users\\Teckos\\Documents\\NetBeansProjects\\LocateMeCheck\\src\\locatemecheck\\loader.gif");
    ImageIcon ok =  new ImageIcon("C:\\Users\\Teckos\\Documents\\NetBeansProjects\\LocateMeCheck\\src\\locatemecheck\\ok-small.gif");
    ImageIcon notok =  new ImageIcon("C:\\Users\\Teckos\\Documents\\NetBeansProjects\\LocateMeCheck\\src\\locatemecheck\\not-ok.gif");
    ImageIcon aide =  new ImageIcon("C:\\Users\\Teckos\\Documents\\NetBeansProjects\\LocateMeCheck\\src\\locatemecheck\\picto-aide.png");
    /**
     * Creates new form NewJFrame
     */
    public LocateMeCheck1() {
        
        initComponents();
        driver = new FirefoxDriver();
        browser();
        IMEI.requestFocus();
      
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        combotype = new javax.swing.JComboBox();
        lab = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        IMEI = new javax.swing.JTextArea();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAlwaysOnTop(true);
        setBackground(new java.awt.Color(255, 255, 255));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setForeground(java.awt.Color.white);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 7)); // NOI18N
        jLabel2.setText("Powered by Teckos / 3R   -   v2.0");
        jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        combotype.setFont(new java.awt.Font("Tahoma", 0, 8)); // NOI18N
        combotype.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "IPHONE", "IPAD", "IPOD TOUCH" }));
        combotype.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combotypeActionPerformed(evt);
            }
        });

        lab.setAlignmentY(0.0F);
        lab.setAutoscrolls(true);
        lab.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lab.setOpaque(true);
        lab.setRequestFocusEnabled(false);
        lab.setVerifyInputWhenFocusTarget(false);

        IMEI.setColumns(20);
        IMEI.setRows(5);
        IMEI.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                IMEIKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(IMEI);

        jButton2.setText("LocateMe Check");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addGap(2, 2, 2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lab, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(combotype, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane1))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton2)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(combotype, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lab, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 352, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

      private void Etape1() {
     browser();
     try {
         
        wait0.until(ExpectedConditions.elementToBeClickable(By.cssSelector("#orc")));   
        driver.findElement(By.cssSelector("#orc")).click();
     
        wait0.until(ExpectedConditions.elementToBeClickable(By.cssSelector("#SC0022 > div.dynTxt.malign")));
        driver.findElement(By.cssSelector("#SC0022 > div.dynTxt.malign")).click();
       
     
        wait0.until(ExpectedConditions.elementToBeClickable(By.cssSelector("#dataList1 > li:nth-child(1) > a:nth-child(1)")));
        driver.findElement(By.cssSelector("#dataList1 > li:nth-child(1) > a:nth-child(1)")).click();
    
        wait0.until(ExpectedConditions.elementToBeClickable(By.cssSelector(".declineContainer2 > button:nth-child(1)")));
        driver.findElement(By.cssSelector(".declineContainer2 > button:nth-child(1)")).click();
        
        
        wait0.until(ExpectedConditions.elementToBeClickable(By.cssSelector("#orc")));
        driver.findElement(By.cssSelector("#orc")).click();
   
        //wait0.until(ExpectedConditions.presenceOfElementLocated(By.partialLinkText("désactiver l’option Localiser mon")));
        //driver.findElement(By.id("coname")).clear();
        
        SUCCES="OUI";
     }
     catch (TimeoutException | NoSuchElementException | StaleElementReferenceException | ElementNotVisibleException e){
         try {//driver.findElement(By.cssSelector("#C2C"));
            driver.findElement(By.cssSelector("#SCB"));
             SUCCES="STOP";
         }
         catch (TimeoutException | NoSuchElementException | StaleElementReferenceException | ElementNotVisibleException e1){
             try {driver.findElement(By.cssSelector("#C2C"));
            
             SUCCES="STOP";
                }
             catch (TimeoutException | NoSuchElementException | StaleElementReferenceException | ElementNotVisibleException e2){
                System.out.println("Echec étape 1 : "+e);
                System.out.println("SUCCES : "+SUCCES);

                SUCCES="NON";
            }
         
        
     }
    }
      } 
     private void Etape1_IPAD() {
     browser_IPAD();
     try {
        wait0.until(ExpectedConditions.elementToBeClickable(By.cssSelector("#orc")));   
        driver.findElement(By.cssSelector("#orc")).click();
        
        wait0.until(ExpectedConditions.elementToBeClickable(By.cssSelector("#SC0113 > div.dynTxt.malign")));
        driver.findElement(By.cssSelector("#SC0113 > div.dynTxt.malign")).click();
       
        //wait0.until(ExpectedConditions.elementToBeClickable(By.cssSelector("#dataList1 > li:nth-child(4)")));
        //driver.findElement(By.cssSelector("#dataList1 > li:nth-child(4)")).click();
        
        wait0.until(ExpectedConditions.elementToBeClickable(By.partialLinkText("Écran fissuré")));
        driver.findElement(By.partialLinkText("Écran fissuré")).click();
        
        wait0.until(ExpectedConditions.elementToBeClickable(By.cssSelector(".declineContainer2 > button:nth-child(1)")));
        driver.findElement(By.cssSelector(".declineContainer2 > button:nth-child(1)")).click();
        
        wait0.until(ExpectedConditions.elementToBeClickable(By.cssSelector("#orc")));   
        driver.findElement(By.cssSelector("#orc")).click();
        
        //wait0.until(ExpectedConditions.presenceOfElementLocated(By.partialLinkText("désactiver l’option Localiser mon")));
        //driver.findElement(By.id("coname")).clear();
        
        SUCCES="OUI";
     }
     catch (TimeoutException | NoSuchElementException | StaleElementReferenceException | ElementNotVisibleException e){
         try {driver.findElement(By.cssSelector("#C2C"));
             SUCCES="STOP";
         }
         catch (TimeoutException | NoSuchElementException | StaleElementReferenceException | ElementNotVisibleException e1){
         
         System.out.println("Echec étape 1 : "+e);
         System.out.println("SUCCES : "+SUCCES);
        
         SUCCES="NON";
         }
         
        
     }
     }
     
     private void Etape1_IPOD() {
     browser_IPOD();
     try {
        wait0.until(ExpectedConditions.elementToBeClickable(By.cssSelector("#orc")));   
        driver.findElement(By.cssSelector("#orc")).click();
        
        wait0.until(ExpectedConditions.elementToBeClickable(By.cssSelector("#SC0114 > div.clr.ht72 > img")));
        driver.findElement(By.cssSelector("#SC0114 > div.clr.ht72 > img")).click();
       
        //wait0.until(ExpectedConditions.elementToBeClickable(By.cssSelector("#dataList1 > li:nth-child(5)")));
        //driver.findElement(By.cssSelector("#dataList1 > li:nth-child(5)")).click();
        
        wait0.until(ExpectedConditions.elementToBeClickable(By.partialLinkText("Écran fissuré")));
        driver.findElement(By.partialLinkText("Écran fissuré")).click();
        
        wait0.until(ExpectedConditions.elementToBeClickable(By.cssSelector(".declineContainer2 > button:nth-child(1)")));
        driver.findElement(By.cssSelector(".declineContainer2 > button:nth-child(1)")).click();
        
        wait0.until(ExpectedConditions.elementToBeClickable(By.cssSelector("#orc")));   
        driver.findElement(By.cssSelector("#orc")).click();
        
       //wait0.until(ExpectedConditions.presenceOfElementLocated(By.partialLinkText("désactiver l’option Localiser mon")));
        //driver.findElement(By.id("coname")).clear();
     }
     catch (TimeoutException | NoSuchElementException | StaleElementReferenceException | ElementNotVisibleException e){
         try {driver.findElement(By.cssSelector("#C2C"));
             SUCCES="STOP";
         }
         catch (TimeoutException | NoSuchElementException | StaleElementReferenceException | ElementNotVisibleException e1){
         
         System.out.println("Echec étape 1 : "+e);
         System.out.println("SUCCES : "+SUCCES);
        
         SUCCES="NON";
         }
         
        
     }
     }
      
        private void browser_IPOD() {
        
      
        Integer attente=8;
        //driver.get("https://getsupport.apple.com/GetSASO?sn=CCQLPWH1F4JW&locale=fr_FR");/*imei locateme*/
        driver.get("https://getsupport.apple.com/GetSASO?sn="+IMEI_ORI+"&locale=fr_FR");/*imei locateme*/
        wait1 = (new WebDriverWait(driver, attente+5));
        wait0 = (new WebDriverWait(driver, attente));
        }
     
     private void browser_IPAD() {
        
      
        Integer attente=8;
        //driver.get("https://getsupport.apple.com/GetSASO?sn=DMPLTAN7FKYC&locale=fr_FR");/*imei locateme*/
        driver.get("https://getsupport.apple.com/GetSASO?sn="+IMEI_ORI+"&locale=fr_FR");/*imei locateme*/
        wait1 = (new WebDriverWait(driver, attente+5));
        wait0 = (new WebDriverWait(driver, attente));
        }
    
     
      private void browser() {
         
        //driver.manage().timeouts().implicitlyWait(15, TimeUnit.SECONDS);
        //baseUrl = "https://selfsolve.apple.com/";
        Integer attente=8;
        //driver.get("https://getsupport.apple.com/GetSASO?locale=fr_FR&sn=358688053658696"); /*imei OK*/
        driver.get("https://getsupport.apple.com/GetSASO?locale=fr_FR&sn="+IMEI_ORI);/*imei locateme*/
        wait1 = (new WebDriverWait(driver, attente+5));
        wait0 = (new WebDriverWait(driver, attente));
      
    }
    
        
    
    
    
     private void checkLM(){
        
        
        String errorMsg="";
        String errorMsg1="";
        //wait0.until(ExpectedConditions.elementToBeClickable(By.id("coname")));
        WebElement element = driver.findElement(By.id("coname"));
        element.clear();
        element.sendKeys(IMEI_ORI);
        driver.findElement(By.id("getCovInfo")).click();
        
        try {
            if (type.equals("IPHONE")) {
                wait0.until(ExpectedConditions.elementToBeClickable(By.id("Écran fissuré")));
                //driver.findElement(By.id("Écran fissuré")).click();
                
            }
            else {
                wait0.until(ExpectedConditions.elementToBeClickable(By.cssSelector("div.selectCountry")));
            }
            etat="OK";
                System.out.println(IMEI_ORI+" : Swappable");
                if (combotype.getSelectedItem().equals("IPHONE")){
                    Etape1();
                    type="IPHONE";
                }    
                else if (combotype.getSelectedItem().equals("IPAD")){
                    Etape1_IPAD();
                    type="IPAD";
                }
                else {Etape1_IPOD();
                    type="IPOD";
                }
                /*RESULTAT.setText("Non Localisé");
                RESULTAT.requestFocusInWindow();
                RESULTAT.selectAll();*/
                /*lab.removeAll();
             lab.setIcon(ok);
             lab.paintImmediately(lab.getBounds ());
             lab.update(lab.getGraphics());*/
                /*Result.append(IMEI_ORI+" : Swappable\n");
                Result.validate(); 
                Result.paintImmediately (Result.getBounds ()); */
         }
        catch (TimeoutException | NoSuchElementException | StaleElementReferenceException | ElementNotVisibleException e){
            try {
                
                System.out.println(IMEI_ORI+" : Check 2");
                WebElement element1 = driver.findElement(By.partialLinkText("désactiver l’option Localiser mon"));
                etat="Localisé";
                System.out.println(IMEI_ORI+" : Localisé");
                /*RESULTAT.setText("Localisé");
                RESULTAT.requestFocusInWindow();
                RESULTAT.selectAll();*/
                
           //lab.removeAll();
             //lab.setIcon(notok);
             //lab.paintImmediately(lab.getBounds ());
             //lab.update(lab.getGraphics());
                /*Result.append(IMEI_ORI+" : Localisé\n"+"\n");
                Result.validate(); 
                Result.paintImmediately (Result.getBounds ()); */
            }
            catch (NoSuchElementException | StaleElementReferenceException | ElementNotVisibleException e1){
                try {
                    System.out.println(IMEI_ORI+" : Check 3");
                    WebElement element2=driver.findElement(By.cssSelector("#errorMsg"));
                    errorMsg=element2.getText();
                    
                    if (errorMsg.contains("ce numéro de série n’est pas valide")){
                        errorMsg="ce numéro de série n’est pas valide";
                        etat="Indéterminé";
                        
                    }
                    else if (errorMsg.contains("Nos données indiquent que ce produit a été remplacé")){
                        errorMsg="ce produit a déjà été remplacé";
                        etat="Indéterminé";
                    }
                    else if (errorMsg.contains("ce numéro de série est lié à une réparation ouverte")){
                        errorMsg="ce numéro de série est lié à une réparation ouverte";
                        etat="Indéterminé";
                    }
                     else if (errorMsg.contains("Désolé, vous ne pouvez pas configurer la réparation en ligne avec ce numéro")){
                        errorMsg="vous ne pouvez pas configurer la réparation en ligne avec ce numéro";
                        etat="Indéterminé";
                    }
                    else if (errorMsg.contains("vous pouvez uniquement remplacer les accessoires en ligne")){
                        errorMsg="désolé, vous pouvez uniquement remplacer les accessoires en ligne";
                        etat="Indéterminé";
                    }
                    else { WebElement element3=driver.findElement(By.cssSelector(".generic_error_message_spacer"));
                            errorMsg1=element3.getText();
                            if (errorMsg1.contains("mais vous ne pouvez pas faire une demande de réparation")) {
                            errorMsg="vous ne pouvez pas configurer la réparation en ligne avec ce numéro";
                            etat="Indéterminé";
                            
                            }
                            else {
                        errorMsg="Echec";
                        etat="Echec";}
                    //driver.findElement(By.cssSelector("#orc-descby")).click();
                            if (type.equals("IPHONE")) {Etape1();
                            }
                            else if (type.equals("IPAD")){Etape1_IPAD();
                            }
                            else if (type.equals("IPOD")){Etape1_IPOD();
                            }
                            
                    }
                    /*RESULTAT.setText("Indéterminé");
                    RESULTAT.requestFocusInWindow();
                    RESULTAT.selectAll();*/
                    /*lab.removeAll();
                    lab.setIcon(aide);
                    lab.paintImmediately(lab.getBounds ());
                    lab.update(lab.getGraphics());*/
                }
                
                
                catch (TimeoutException | NoSuchElementException | StaleElementReferenceException | ElementNotVisibleException e3){
                etat="Echec";
                System.out.println("#errorMsg non trouvé");
                    errorMsg=etat;
                }       
                   
                
                    
                System.out.println(IMEI_ORI+" : "+errorMsg);
                //Result.append(IMEI_ORI+" : "+errorMsg+"\n"+"\n");
       
            } 
            catch (TimeoutException e1){
                etat="Non";
                System.out.println(IMEI_ORI+" : Délai dépassé");
                //Result.append(IMEI_ORI+" : Délai dépassé\n");
   
            } 
        }
    }
    
    private void verif (){
        /*RESULTAT.setText("Traitement en cours");
            RESULTAT.requestFocusInWindow();
            RESULTAT.selectAll();
            RESULTAT.update(RESULTAT.getGraphics());*/
           /*lab.removeAll();
             lab.setIcon(loader);
             lab.paintImmediately(lab.getBounds ());
             lab.update(lab.getGraphics());*/
        //IMEI_ORI=IMEI.getText();
        /*if((IMEI_ORI.length() != 12) & (IMEI_ORI.length() != 15))
                       {
                            JOptionPane.showMessageDialog(null,"Le champs doit avoir 12 ou 15 caractères");
                            IMEI.setText("");
                            IMEI.requestFocusInWindow();
                        }*/
        
        Integer j=1;
        SUCCES="NON";
 
        /*try {
            driver.findElement(By.id("getCovInfo"));
            System.out.println("J'ai trouvé getCovInfo");
            SUCCES="OUI";
        }
        catch (TimeoutException | NoSuchElementException | StaleElementReferenceException | ElementNotVisibleException e) {
            while ((SUCCES.equals("NON"))&(j<=3)) {
                System.out.println("Je n'ai pas trouvé coname, je relance etape1");
                System.out.println("Tentative : "+j);
                if (combotype.getSelectedItem().equals("IPHONE")){
                    Etape1();
                    type="IPHONE";
                }    
                else if (combotype.getSelectedItem().equals("IPAD")){
                    Etape1_IPAD();
                    type="IPAD";
                }
                else {Etape1_IPOD();
                    type="IPOD";
                }
                j+=1;
            }
        }*/
        System.out.println(etat);
        System.out.println(type);
        System.out.println(SUCCES);
        
        if ((etat.equals("OK"))||(etat.equals("IMP"))){
            while ((SUCCES.equals("NON"))&(j<=3)) {
                System.out.println("Je n'ai pas trouvé coname, je relance etape1");
                System.out.println("Tentative : "+j);
                if (combotype.getSelectedItem().equals("IPHONE")){
                    Etape1();
                    type="IPHONE";
                }    
                else if (combotype.getSelectedItem().equals("IPAD")){
                    Etape1_IPAD();
                    type="IPAD";
                }
                else {Etape1_IPOD();
                    type="IPOD";
                }
                j+=1;
            }
        }
        else {SUCCES="OUI";
        
        }
        
        if (SUCCES.equals("OUI")) {
            //IMEI_ORI=IMEI.getText();
            
            checkLM();
              }
        else if (SUCCES.equals("STOP")) {
            
                             
            
            /*RESULTAT.setText("Indéterminé");
            RESULTAT.requestFocusInWindow();
            RESULTAT.selectAll();*/
            lab.removeAll();
                  lab.setIcon(aide);
            lab.paintImmediately(lab.getBounds ());
            lab.update(lab.getGraphics());
            etat="Echec";
            
              }
        else {/*RESULTAT.setText("PB de connexion");
            RESULTAT.requestFocusInWindow();
            RESULTAT.selectAll();*/
            lab.removeAll();
            lab.setIcon(aide);
            lab.paintImmediately(lab.getBounds ());
            lab.update(lab.getGraphics());
            etat="Echec";
         }            
        
        
        
    }
    
    private void combotypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combotypeActionPerformed
        if (combotype.getSelectedItem().equals("IPHONE")){
            type="IPHONE";
        }
        else if (combotype.getSelectedItem().equals("IPAD"))
        {type="IPAD";

        }
        else {type="IPOD";

        }
    }//GEN-LAST:event_combotypeActionPerformed

    private void IMEIKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_IMEIKeyPressed
        
        
       
             
             
             
         
    }//GEN-LAST:event_IMEIKeyPressed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
     Integer CPT=IMEI.getLineCount();
     
        Integer i;
        Integer j;
        
        
        String [] Ligne= IMEI.getText().split("\n");
        //RESULTAT.removeAll();
        if (IMEI.getText().endsWith("\n"))
            {CPT=CPT-1;
            System.out.println("Nbr de ligne : "+CPT);}
        for (i=0;i<CPT;i++)
        {   lab.removeAll();
             lab.setIcon(loader);
             lab.paintImmediately(lab.getBounds ());
             lab.update(lab.getGraphics());
            IMEI.setText("");
            IMEI.paintImmediately(IMEI.getBounds ());
            IMEI.update(IMEI.getGraphics());
            for (j=0;j<i;j++)
                {IMEI.append(Ligne[j]+"\n"); IMEI.paintImmediately(IMEI.getBounds ());
            IMEI.update(IMEI.getGraphics());}
            IMEI_ORI=Ligne[i];
                if((IMEI_ORI.length() != 12) & (IMEI_ORI.length() != 15))
                       {
                            etat="Format incorrect";
                            SUCCES="OUI";
                        }
            
                else {verif();}
            Ligne[i]=Ligne[i]+"  :  "+etat;
           
            //RESULTAT.append(Ligne[i]+"\n"); 
            
            IMEI.append(Ligne[i]+"\n"); IMEI.paintImmediately(IMEI.getBounds ());
            IMEI.update(IMEI.getGraphics());
            for (j=i+1;j<CPT;j++)
                {IMEI.append(Ligne[j]+"\n"); }
            IMEI.paintImmediately(IMEI.getBounds ());
            IMEI.update(IMEI.getGraphics());
            
        }
        
        lab.removeAll();
             lab.setIcon(ok);
             lab.paintImmediately(lab.getBounds ());
             lab.update(lab.getGraphics());
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LocateMeCheck1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LocateMeCheck1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LocateMeCheck1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LocateMeCheck1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LocateMeCheck1().setVisible(true);
                
            }
            
        });
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea IMEI;
    private javax.swing.JComboBox combotype;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lab;
    // End of variables declaration//GEN-END:variables
}
